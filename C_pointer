指针和地址

    内存区的每一个字节（8bit，称为一个内存单元）都有一个编号，这个编号称为地址。如果在程序中定义一个变量，编译时就会根据变量类型
    分配相应的长度的内存单元数（int为2个，char为1个，float为4个）。编译后的汇编代码中，对变量的操作其实转化成了对地址的操作，这种
    按照变量地址存取变量的方式称为“直接访问”方式。
    
    在C中，地址也称为指针，也就是通过指针可以找到以它为地址的内存单元。一个变量的地址称为该变量的指针，存放该变量地址（指针）的
    变量称为指针变量，也就是说，指针变量的值就是指针（地址）。通过访问指针变量进而访问指向的变量称为间接访问。
    
    C中用“*”表示“指向”，如果i_pointer 代表指向i的指针变量，则*i_pointer代表i。
    指针变量定义格式：     基类型    *指针变量名 //*表示变量类型为指针型变量
    基类型指定该指针变量可以指向的变量类型，例 int *i_pointer。基类型是为了方便指针的运算，不同基类型的指针的移动和运算的尺度
    根据指向变量类型确定。只有整型变量的地址才能存放到指向整型变量的指针变量中。
    指针变量引用：      
    int a; 
    int *pointer_1; 
    pointer_1=&a；
    printf(“%d\n”, *pointer_1);
    &取址运算符，&a为变量a的地址；*指针运算符，*a为指针a指向的存储单元（变量）。&和*的运算优先级相同，都是自右向左执行。
    C中函数调用时实参到形参的传递是单向的，被调函数的形参发生变化并不能反映到主函数中。用指针变量作为函数参数，在函数执行过程
    中使指针变量所指向的变量值发生变化，函数调用结束后，这些变量值得变化依然保持下来。调用函数不能改变实参指针变量的值，但是
    可以改变实参指针变量所指变量的值，用指针变量作为参数可以得到多个变化了的值，不用指针变量难以做到这点。

数组指针和数组指针变量：
    数组指针指向数组的起始地址，数组元素的指针指向数组元素地址。C中规定数组名可代替数组首地址，也就是0号元素地址。
    
    int a[10];
    int *p;
    p=&a[0]; /*等价于p=&a*/
    C规定：如果p的初值为&a[0]，则a+i和p+i就是a[i]的地址，指向数组的第i个元素。*(p+i)和*(a+i)就是a+i和p+i就是指向的元素。
    指向数组的指针变量也可带下标，p[i]和*(p+i)等价。
    综上，引用数组元素有三种方法：
    下标法：a[i];
    指针法：*(p+i)和*(a+i)；
    将++和--作用于指针变量可以使指针变量向前或向后运动，指向上一个或下一个数组元素，例：
    p=a;
    while (p<a+100)
    printf(“%d”,*p++);
