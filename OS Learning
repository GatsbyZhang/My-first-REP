thread model：
    进程：把相关的资源集合在一起，包括存放程序正文和数据以及其他资源的地址空间。多进程之间可以共享物理内存、磁盘、打印机
和其他资源。进程之间切换迅速，就像是存在多个虚拟CPU。

    线程：在同一个进程中间允许多个较独立的线程存在，类似于多进程模拟多CPU，多线程模拟同CPU上的多个进程，共享同一地址空间和其他资源。
对同一进程中的多个线程，CPU在多线程之间来回切换，实现虚拟的并行运行，这一点类似多进程的并行运行。

    事实上可以把进程理解为一个执行的线程，这个线程包含program counter（指向下一条指令）、regsiter（存放变量）、
stack和heap（记录执行历史，每一帧保存了一个已调用但是还没返回的过程）。尽管线程必须在某个进程中执行，但是有区别：进程用
于把资源集中到一起，而线程则是在CPU上被调度执行的实体。

    不同进程之间的独立性远大于不同线程，多个进程可能来自于不同用户，因此相互之间可能有敌意，因此他们的地址空间不同，存放
的资源不同，这样就不会互相篡改；但是线程来自同一进程（完成某一任务），不同线程之间的目的应该是互相配合，因此即使他们共用
同一地址空间（拥有相同的Global Variables）并且可修改同一文件，但是并不会造成什么困扰。

    线程和进程（仅拥有一个线程）之间都有running/ready/blocking等状态，状态之间的转换也是类似的。
    
    每个线程有不同的堆栈，存放调用但是未返回的过程的local variables以及调用完成后的return address。之所以有不同的堆栈，是
因为不同的线程可能会调用不同的过程，因此有不同的执行历史。

    
    

